---
title:      "对AuthZ的五层理解"
date:       2024-08-23
tags:
    - Auth
---

# 对AuthZ的五层理解



第一层RBAC
可以成为什么角色？ 鉴权 人的角色

第二层ABAC
在什么情况下可以成为什么角色？
角色只是人或组织的一个attitude，实现更灵活的控制需要多个属性共同判断
增加属性，每个属性绑定一个Policy的实现，做成职责链模式进行鉴权

第三层ReBAC
属性的本质是与某件事物的关系
与什么事情有关？
是对1和2的业务层面抽象，通过数据关系图的构建，解决实际业务大量数据实体关系的ACL问题, 图计算 + 关系代数
https://zhuanlan.zhihu.com/p/602881215
可以实现 授权服务集中化，完全托管

第四层ReBAC 叠加 Policy Engine

在复杂条件下与什么事情有关

对1和2 + 规则引擎 的 技术层面抽象，ABAC，数据验证，Rule Engine，需要自行处理数据关系，组装context和condition丢给 policy DSL 做函数计算
Rule管理集中化，部分托管


第五层 按需建模，灵活组合1-4，解决现实中的复杂问题

单体系统，还是分布式系统？

目的论，实践论。

要不要集中存储Policy？ 为了整合

要不要集中存储角色信息和关系数据？ 为了简化用户申请权限的流程，为了集中审计和证明

在集中层处理Auth逻辑，还是每个业务自己处理？ 
业务现在和将来是否具有共性？

怎么做审计？再哪一层做审计？
每个子系统的审计是集中的还是独立的？

任何抽象方式，对其解决的问题负责。实际 第三层和第四层组合使用，解决各自擅长的问题。
人 - principle => authorization -> ReBAC  角色和职责的变化                     
事 - resource + action => validation -> PolicyEngine 事情的可行性与风险

人（Principle - Group relationship），事 (Res & Action - Policy Rules)， 人做事的记录 (Events) 都需要可审计可追踪。



Why OPA is NOT a good solution for AuthZ ?
OpenPolicyAgent(OPA) is a generic policy engine, wrap it to be an AuthZ solution caused lots of effort (Will Jiang tried before)
OPA requires agent deployment, it not only introduced extra effort on Local testing, dev, prod, but also lack of SDK, thus Will developed Java/Go SDK for it, and it requires Continuous effort to maintain it
OPA can do ABAC and policy evaluation well, however, it’s pure engine, without metadata and relationship storage, thus ReBAC is impossible, but ReBAC is the most suitable model for AuthZ scenario (Will Jiang developed a simple ReBAC based on it before, but it’s still not a real Relation Graph based ReBAC)
OPA’s rego language has some learn curve, and it doesn’t provide policy storage and policy distribution solutions (Will Jiang also developed it…)


Why OpenFGA is a good solution for AuthZ ？
It’s built for AuthZ natively, based on Google Zanzibar paper (https://zanzibar.academy/ ), it’s the most effective and most widely used model for ReBAC AuthZ
OpenFGA is built by Auth0, a leading AuthZ company, It was acquired by Okta years ago, now part of Okta product, the open source part is exactly the same as Fine-grained Authorization solution of Auth0, maturity and credit is much better than OPA (which only used in K8S infra level for most use cases)
OpenFGA has all languages SDK, very easy to integrate, and no effort us, no need secondary development
OpenFGA can do Provable Compliance, it has Auth Query feature, you can query Whether and WHY some user can perform some action, it’s only possible when using ReBAC model and Graph storage to infer the access control Path
OpenFGA’s sever side is just a binary with PG/MySQL storage, deployment and maintenance effort is minimal, the Z3PC review showed high score (because it’s built by a security company actually)
The auth query performance is good during the testing, and it’s stateless thus scalable (while OPA doesn’t have server-side, Will Jiang wrapped it with Java, performance and maintenance effort is much larger than Golang based OpenFGA, in which we don’t need to develop even one line of code)

Play this one minute will get the core concepts and model of OpenFGA:
https://play.fga.dev/