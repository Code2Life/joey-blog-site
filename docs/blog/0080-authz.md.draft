---
title:      "对AuthZ的五层理解"
date:       2024-08-23
tags:
    - Auth
---

# 对AuthZ的五层理解



第一层RBAC
可以成为什么角色？ 鉴权 人的角色

第二层ABAC
在什么情况下可以成为什么角色？
角色只是人或组织的一个attitude，实现更灵活的控制需要多个属性共同判断
增加属性，每个属性绑定一个Policy的实现，做成职责链模式进行鉴权

第三层ReBAC
属性的本质是与某件事物的关系
与什么事情有关？
是对1和2的业务层面抽象，通过数据关系图的构建，解决实际业务大量数据实体关系的ACL问题, 图计算 + 关系代数
https://zhuanlan.zhihu.com/p/602881215
可以实现 授权服务集中化，完全托管

第四层ReBAC 叠加 Policy Engine

在复杂条件下与什么事情有关

对1和2 + 规则引擎 的 技术层面抽象，ABAC，数据验证，Rule Engine，需要自行处理数据关系，组装context和condition丢给 policy DSL 做函数计算
Rule管理集中化，部分托管


第五层 按需建模，灵活组合1-4，解决现实中的复杂问题

单体系统，还是分布式系统？

目的论，实践论。

要不要集中存储Policy？ 为了整合

要不要集中存储角色信息和关系数据？ 为了简化用户申请权限的流程，为了集中审计和证明

在集中层处理Auth逻辑，还是每个业务自己处理？ 
业务现在和将来是否具有共性？

怎么做审计？再哪一层做审计？
每个子系统的审计是集中的还是独立的？

任何抽象方式，对其解决的问题负责。实际 第三层和第四层组合使用，解决各自擅长的问题。
人 - principle => authorization -> ReBAC  角色和职责的变化                     
事 - resource + action => validation -> PolicyEngine 事情的可行性与风险

人（Principle - Group relationship），事 (Res & Action - Policy Rules)， 人做事的记录 (Events) 都需要可审计可追踪。